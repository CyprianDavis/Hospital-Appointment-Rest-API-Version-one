package com.davis.hospital_Appointment_Rest_API.model;

import java.util.Date;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
/**
 * Represents a notification sent to a user in the hospital appointment system.
 * Notifications are associated with a specific user and contain message content
 * along with metadata about the notification type and status.
 * 
 * <p>This entity maps to a database table storing notification records,
 * with relationships to the {@link User} entity.</p>
 * 
 * @see User
 * @author CYPRIAN DAVIS
 */
@Entity
public class Notification {
    /**
     * The unique identifier for this notification.
     * Automatically generated by the persistence provider.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    /**
     * The user who receives this notification.
     * Many notifications can be associated with one user.
     * 
     * @see User
     */
    @ManyToOne
    @JoinColumn(name = "userId")
    private User user;
    
    /**
     * The content of the notification message.
     */
    private String message;
    
    /**
     * The type/category of the notification message.
     * Used to classify notifications for filtering or display purposes.
     */
    private String messageType;
    
    /**
     * Indicates whether the notification has been read by the user.
     * Defaults to false when a new notification is created.
     */
    private boolean isRead;
    
    /**
     * The timestamp when this notification was created.
     * Only the time portion is stored (without date information).
     */
    @Temporal(TemporalType.TIME)
    private Date createdOn;
    
    // ... (rest of the existing code remains unchanged)

	/**
	 * @param user
	 * @param message
	 * @param messageType
	 * @param createdOn
	 */
	public Notification(User user, String message, String messageType, Date createdOn) {
		this.user = user;
		this.message = message;
		this.messageType = messageType;
		this.createdOn = createdOn;
	}
	public Notification() {}
	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}
	/**
	 * @param id the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}
	/**
	 * @return the user
	 */
	public User getUser() {
		return user;
	}
	/**
	 * @param user the user to set
	 */
	public void setUser(User user) {
		this.user = user;
	}
	/**
	 * @return the message
	 */
	public String getMessage() {
		return message;
	}
	/**
	 * @param message the message to set
	 */
	public void setMessage(String message) {
		this.message = message;
	}
	/**
	 * @return the messageType
	 */
	public String getMessageType() {
		return messageType;
	}
	/**
	 * @param messageType the messageType to set
	 */
	public void setMessageType(String messageType) {
		this.messageType = messageType;
	}
	/**
	 * @return the isRead
	 */
	public boolean isRead() {
		return isRead;
	}
	/**
	 * @param isRead the isRead to set
	 */
	public void setRead(boolean isRead) {
		this.isRead = isRead;
	}
	/**
	 * @return the createdOn
	 */
	public Date getCreatedOn() {
		return createdOn;
	}
	/**
	 * @param createdOn the createdOn to set
	 */
	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}
	
	
	

}
