package com.davis.hospital_Appointment_Rest_API.model;

import java.time.LocalTime;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

/**
 * Represents a doctor's schedule in the Hospital Appointment System.
 * <p>
 * This entity maps a doctor's availability for appointments on specific days,
 * including their working hours and maximum appointment capacity. Each schedule
 * entry defines when a doctor is available for appointments on a particular day
 * of the week.
 * </p>
 * 
 * <p><b>Relationships:</b>
 * <ul>
 *   <li>Many-to-one relationship with {@link Doctor}</li>
 * </ul>
 * </p>
 * 
 * <p><b>Table Structure:</b>
 * <ul>
 *   <li>doctor_schedule - Stores all doctor schedule entries</li>
 * </ul>
 * </p>
 * 
 * @author CYPRIAN DAVIS
 * @version 1.0
 * @since 2025-06-03
 * @see Doctor
 */
@Entity
@Table(name = "Doctor_Schedule")
public class DoctorSchedule {
    
    /**
     * The unique primary key identifier for this schedule entry.
     * <p>
     * Automatically generated by the database using identity strategy.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    /**
     * The doctor associated with this schedule entry.
     * <p>
     * Represents a many-to-one relationship with the Doctor entity,
     * using doctorId as the foreign key.
     * </p>
     */
    @ManyToOne
    @JoinColumn(name = "doctorId")
    private Doctor doctor;
    
    /**
     * The day of the week for this schedule entry.
     * <p>
     * Expected values: "Monday", "Tuesday", etc.
     * </p>
     */
    private String dayOfWeek;
    
    /**
     * The start time of the doctor's availability window.
     * <p>
     * Uses Java 8 {@link LocalTime} to represent time without date.
     * </p>
     */
    private LocalTime startTime;
    
    /**
     * The end time of the doctor's availability window.
     * <p>
     * Uses Java 8 {@link LocalTime} to represent time without date.
     * </p>
     */
    private LocalTime endTime;
    
    /**
     * The maximum number of appointments allowed during this time slot.
     * <p>
     * Used to limit patient bookings for this schedule entry.
     * </p>
     */
    private int maximumAppointments;

    /**
     * Constructs a new DoctorSchedule with the specified parameters.
     *
     * @param doctor the doctor associated with this schedule (cannot be null)
     * @param dayOfWeek the day of the week (e.g., "Monday", "Tuesday")
     * @param startTime the start time of availability window (cannot be null)
     * @param endTime the end time of availability window (cannot be null)
     * @param maximumAppointments the maximum number of appointments allowed (must be positive)
     */
    public DoctorSchedule(Doctor doctor, String dayOfWeek, LocalTime startTime, LocalTime endTime,
            int maximumAppointments) {
        this.doctor = doctor;
        this.dayOfWeek = dayOfWeek;
        this.startTime = startTime;
        this.endTime = endTime;
        this.maximumAppointments = maximumAppointments;
    }
    public DoctorSchedule() {}

    /**
     * Gets the unique identifier of this schedule entry.
     *
     * @return the schedule ID, or null if not persisted
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of this schedule entry.
     * <p>
     * Note: Typically only used by JPA, not for business logic.
     * </p>
     *
     * @param id the ID to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the doctor associated with this schedule.
     *
     * @return the associated Doctor entity
     */
    public Doctor getDoctor() {
        return doctor;
    }

    /**
     * Sets the doctor associated with this schedule.
     *
     * @param doctor the Doctor to associate with this schedule
     */
    public void setDoctor(Doctor doctor) {
        this.doctor = doctor;
    }

    /**
     * Gets the day of the week for this schedule.
     *
     * @return the day of week (e.g., "Monday")
     */
    public String getDayOfWeek() {
        return dayOfWeek;
    }

    /**
     * Sets the day of the week for this schedule.
     *
     * @param dayOfWeek the day of week to set (e.g., "Monday")
     */
    public void setDayOfWeek(String dayOfWeek) {
        this.dayOfWeek = dayOfWeek;
    }

    /**
     * Gets the start time of availability window.
     *
     * @return the start time, never null
     */
    public LocalTime getStartTime() {
        return startTime;
    }

    /**
     * Sets the start time of availability window.
     *
     * @param startTime the start time to set (cannot be null)
     */
    public void setStartTime(LocalTime startTime) {
        this.startTime = startTime;
    }

    /**
     * Gets the end time of availability window.
     *
     * @return the end time, never null
     */
    public LocalTime getEndTime() {
        return endTime;
    }

    /**
     * Sets the end time of availability window.
     *
     * @param endTime the end time to set (cannot be null)
     */
    public void setEndTime(LocalTime endTime) {
        this.endTime = endTime;
    }

    /**
     * Gets the maximum number of appointments allowed.
     *
     * @return the maximum appointments (positive integer)
     */
    public int getMaximumAppointments() {
        return maximumAppointments;
    }

    /**
     * Sets the maximum number of appointments allowed.
     *
     * @param maximumAppointments the maximum appointments to set (must be positive)
     */
    public void setMaximumAppointments(int maximumAppointments) {
        this.maximumAppointments = maximumAppointments;
    }
}